
/* html{
    font-size: 8px;
} */
/* CSS Selectors  */
/* Type Selector (elements)
class 
id  */

/* selector {
    css properties
} */

/* Universal Selector (*)  */

/* *{
    background-color: gray;
} */


h1 {
color:red;
}

.blue {
    color: blue;
}

#id-selector {
    color: coral;
    font-size: 20px;
    text-align: center;
}

/* Nested selectors  */
h2, h3, .Group-3, #Group-4 {
    text-align: center;
}

ul li{
    font-size: 32px;
    /* list-style-type: square; */
}

/* Pseudo-classes and Pseudo-elements */
/* Pseudo-classes and pseudo-elements are used for styling specific states or parts of elements. 
Pseudo classes target's the elements based on a particular state and pseudo elements targets the elements on basis of a particular part of that element. */
a:hover {
    color: rgba(206, 55, 5, 0.842);
    text-decoration: none;
}

.pseudo-elements::first-line{
    font-weight: bold;
}

.pseudo-elements::before{
   content: " This is a pseudo element selection -  ";
}

.pseudo-elements::after{
   content: " - It was fun learning about pseudo selections";
}


/* Combinator Selectors */
 /* in CSS are used to define relationships between selectors, allowing you to style elements based on their hierarchy or positioning in the document. 
 Common combinators include descendant ( ), child (>), adjacent sibling (+), and general sibling (~). */

 /* 1. Descendant Selectors: Targets an element inside another, such as paragraphs inside div .For example, styling paragraphs inside a div. */
 .descendant p{
    font-size: 64px;
 }

.direct-child > p{
    color: white;
    background-color: brown;
}

/* .second-parent */
/* Have an hyphen(-) before the paragraph. */
/* change the font color of the paragraph to red  */
.second-parent > p::before{
    content: " - ";
    /* -pseudo-elements:: before; */
   
}

.second-parent > p{
    color: red;
};

/* 3. Adjacent Sibling Selector (+): Styles an element immediately following another .
/* For example, making the first paragraph bold after an h1. */
/* h2.adjacent-sibling + p {
    color: red;
    font-size: 32px;
}  */

.adjacent + p{
    color:  red;
}


/* General Sibling Selector (~): Styles all siblings that follow a specific element. For example, italicizing all paragraphs following an h1. */
.general-sibling-selector ~ p{
    font-size: 32px;
}

/* Attribute selectors in CSS target elements based on the presence or value of their attributes. Examples include [attr] (selects elements with the attribute), 
[attr="value"] (matches specific values), and [attr^="val"] (matches values starting with "val"). */

/* 1. Presence Selector: It selects elements that contain a specific attribute. For example, styling all inputs with a type attribute. */
input[type]{
    border: 1px solid red;
}

/* 2. Attribute Value Selector: It targets elements with a particular attribute value. For example, styling text inputs. */
input[placeholder="Text input"]{
    padding: 32px;
}

a[href^="https"]{
    color: green;
}

/* Wildcard Selector (*=): Matches elements where the attribute value contains a specific string. For example, underlining links with example in the URL. */
a[href*="example"]{
    background-color: aqua;
}

/* Pseudo-classes in CSS define the special states of elements for styling. Examples include :hover (applies when an element is hovered), :first-child (targets the first child of a parent), and :nth-child(2) (targets the second child). */

/* 1. :hover: Styles elements when the user hovers over them. For example, changing the color of a link when hovered. */

.pseudo-class:hover{
    background-color: red;
    color: white;
    font-size: 32px;
    text-align: center;
    text-decoration: none; 

}

/* 2. :focus: Styles the elements when the user focus on any particular element. */
.focus{
    border: 1px solid red;
}

.focus:focus{
    background-color: blue;
    color: white;
}

/* 3. :first-child: Styles the element which is the first child of it's parent. */
.boxes{
    margin-top: 20px;
    margin-bottom: 20px;
    width: 500px;
    height: 300px;
    border: 1px solid red;

}
.box{
    background-color: rgb(19, 9, 156);
    color: white;
    text-align: center;
}

.box:first-child{
    font-size: 32px;
}
.box:last-child{
    background-color: red;
    font-size: 32px;
}

.box:nth-child(2){
    background-color: green;
    font-size: 18px;
}

.box:nth-child(3){
    background-color: black;
    font-size: 20px;
}

/* 5. :not: Helps to remove a particular element from the styling index or styling context.
 */
 .container{
    margin-top: 20px;
    border: 1px solid green;
    width: 400px;
    height: 200px;
 }
 /* p:not(.box-3){
    background-color: chocolate;
    color: white;
    font-size: 20px;
    /* border: 2px solid white; 
 /* }  */

.container>p:not(.box-3){
    background-color: chocolate;
}

/* 5. Pseudo-Element's */
/* The Pseudo Element help's to access and control a specific part of an element for inserting content before an element or inserting content after an element. Targeting any specific part of a word or a sentence. It is usually used to beautify the internal content of an element. */

/* 1. ::before: It helps to insert some content before an element. */
.pseudo-element-container{
    margin-top: 20px;
    padding: 10px;
    width: 400px;
    height: 400px;
    border: 1px solid red;
}

.pseudo-element-container > .pseudo-element-1::before{
    content: "Hello, This is an introduction to pseudo elements";
    display: block;
    color: green;
}

/* 2. ::after: It help's to insert some content after an element. */

/* Example: */
.pseudo-element-container > .pseudo-element-1::after{
    content: "This is the content inserted using pseudo element after property";
    display: block;
    color: blue;
}

/* 3.::first-line: Styles the first line of text within a block element. Line breaks mark the beginning of a new line. */
.pseudo-element-1::first-line{
    color: red;
}

/* 4. ::first-letter: It Styles the first-letter of a word or a sentence. */
.pseudo-element-1::first-letter{
    color: rgb(170, 255, 0);
    font-size: 22px;
}


/* comment  */
.seudo-element{
    margin-top: 10px;
    
}
.seudo-element::placeholder{
    color: red;
    font-size: 18px;
    text-decoration: line-through;
}

/* CSS COLORS  */
/* CSS colors are used to set the color of different parts of a webpage, like text, background, and borders. 
This helps make the page look more attractive and easier to read. 
You can define colors using names, hex codes, RGB values, and more. */
.normal-color{
    color: red;
}

.hex-code-color{
    background-color: #08CB00;
}

.rgb-color{
    color: rgb(0, 0, 255);
}

.rgba-color{
    color: rgba(216, 87, 230, 0.5);
}

.bg-color{
    background-color: rgba(0, 0, 255, 0.8);
    color: #fff;
    border: 1px solid red;
    border-radius: 5px;
}

.bg-color:hover{
    background-color: rgba(200, 0, 0.5);
    color: #000;
}

/* 5. Shadows and Text Effects */
/* You can use box-shadow to add shadows around elements or text-shadow for adding shadows to the text, creating depth and emphasis. */

.text-shadow{
    text-shadow: 2px 2px 2px rgba(255, 0, 0, 0.5);
    color: #3AF269;
    
}

.box-shadow-effect{
    box-shadow: 10px 5px 5px rgba(0, 0, 200, 0.5);
    background-color: red;
    color: white;
    padding: 20px;
}

/* 6. Gradients */
/* CSS allows you to create gradients using the background property. Gradients can transition smoothly between two or more colors. */

/* CSS linear-gradient() Function */
/* The CSS linear-gradient() function creates a linear gradient. */

/* A linear gradient defines a color transition that goes in a straight line, it can go down, up, to left, to right, or diagonally. */
/* 
A linear gradient requires at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect.

Syntax
background-image: linear-gradient(direction, color-stop1, color-stop2, ...); */

.linear-gradient-to-top{
    margin-top: 20px;
    padding: 40px;
    color: #fff;
    font-size: 32px;
    background-image: linear-gradient(to top, red, blue);
}

.linear-gradient-to-right{
    background-image: linear-gradient(to right, yellow, green);
    margin-top: 20px;
    padding: 40px;
    font-size: 20px;
    border-radius: 5px;
    
}

.linear-gradient-to-left{
    background-image: linear-gradient(to right,green, gold);
    text-shadow: 3px 5px 3px rgba(0, 0, 255, 1);
    margin-top: 20px;
    padding: 40px;
    font-size: 20px;
    border-radius: 5px;
    color: white;
    
}

.diagonal-gradient-to-bottom-right{
    background-image: linear-gradient(to bottom right, red, gold);
    margin-top: 20px;
    padding: 40px;
    color: white;
    font-size: 32px;
    border-radius: 5px;
}

.diagonal-gradient-to-top-left{
    background-image: linear-gradient(to top left, blue, rgb(9, 206, 58));
    margin-top: 20px;
    padding: 40px;
    color: white;
    font-size: 32px;
    border-radius: 5px;
}

/* to top  */ 
/* - represented using 0deg */
.linear-angles-0deg{
    background-image: linear-gradient(0deg, red, black);
    margin-top: 20px;
    padding: 40px;
    font-size: 1.5rem;
    color: #fff;
}


/* to right  */ 
/* - represented using 90deg */
.linear-angles-90deg{
    background-image: linear-gradient(90deg, rgb(47, 235, 9), rgb(175, 3, 121));
    margin-top: 20px;
    padding: 40px;
    font-size: 1.5rem;
    color: #fff;
}

/* Linear gradient for multiple color stops  */
.kenyan-flag-colors{
    width: 400px;
    height: 200px;
    margin-top: 20px;
    background-image: linear-gradient(black, white, red, white, green);
}


.rainbow-colors{
    width: 600px;
    height: 400px;
    background-image: linear-gradient(to right, #ff1a00, #ff8d00, #e3ff00, #00ff04, #0051ff);
    margin-top: 20px;
}

/* The CSS repeating-linear-gradient() function is used to repeat linear gradients: */
.repeating-linear-gradients{
    width: 600px;
    height: 400px;
    margin-top: 20px;
    background-image: repeating-linear-gradient(green, green 20%, red 20%, red 60%);
}

/* CSS radial-gradient() Function */
/* The CSS radial-gradient() function creates a radial gradient. */

/* A radial gradient defines a color transition that goes goes out from a central point. */

/* A radial gradient requires at least two color stops. Color stops are the colors you want to render smooth transitions among. */

.radial-gradient{
    background-image: radial-gradient(green, yellow, red);
    width: 400px;
    height: 200px;
    margin-top: 20px;
}

.radial-gradient-circle{
    background-image: radial-gradient(circle, red, rgb(190, 6, 172));
    width: 600px;
    height: 400px;
    margin-top: 20px;
}


/* CSS repeating-radial-gradient() Function */
/* The CSS repeating-radial-gradient() function is used to repeat radial gradients: */
.repeating-radial-gradient{
    width: 400px;
    height: 200px;
    margin-top: 20px;
    background-image: repeating-radial-gradient(circle, red 10%, yellow 20%, green 30%);
}

.clip{
    margin-top: 20px;
    text-align: left;
    color: red;
    font-size: 32px;
}

/* CSS Text Effects */
.text-overflow-clip{
    width: 100px;
    height: 50px;
    border: 1px solid red;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: clip;
}

.text-overflow-clip:hover{
    overflow: visible;
}


.ellipsis{
    margin-top: 20px;
    text-align: left;
    color: rgb(17, 136, 3);
    font-size: 32px;
}

.text-overflow-ellipsis{
    width: 100px;
    height: 100px;
    border: 1px solid red;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

 .btn-elipsis{
    font-size: 16px;
    width: 100px;
    height: 20px;
    background-image: linear-gradient(rgba(255, 255, 0.5));
    border: 1px solid yellow;
    border-radius: 5px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/* The word-wrap property allows you to force the text to wrap - even if it means splitting it in the middle of a word: */
.word-wrap{
    width: 600px;
    height: 600px;
    border: 1px solid yellow;
    word-wrap: break-word;
}

/* word-break  */
.word-break{
    width:50%;
    height: 70vh;
    border: 1px solid red;
    word-break: break-all;
}

/* CSS writing-mode Property */
/* The CSS writing-mode property specifies whether lines of text are laid out horizontally or vertically. */

/* This property can take one of the following values: */

/* horizontal-tb - Default. The text flows horizontally from left to right, vertically from top to bottom */
/* vertical-rl - The text flows vertically from top to bottom, horizontally from right to left */
/* vertical-lr - The text flows vertically from top to bottom, horizontally from left to right */

.tb{
    color: red;
    writing-mode: horizontal-tb
}

.rl{
    color: rgb(38, 128, 0);
    writing-mode: vertical-rl;
}

.lr{
    margin-top: 20px;
    color: #ff8d00;
    writing-mode: vertical-lr;
}

/* The CSS Box Model defines how elements are sized, positioned, and rendered on a webpage. When a browser loads an HTML document, it creates a DOM tree and assigns a box to each element. This box calculates the element's dimensions and position relative to its parent or the root <html> element, ensuring accurate layout and spacing. */
/* Borders  */
.borders{
    margin-top: 20px;
    border: 1px solid red;
}

.border-top{
    margin-top: 20px;
    border-top: 1px dashed green;
}

.border-right{
    width: 50%;
    height: 50vh;
    margin-top: 20px;
    border-right: 1px dotted black;
}

.all-borders{
    text-align: center;
    width: 200px;
    height: 200px;
    margin-top: 20px;
    border-top: 1px solid red;
    border-bottom: 1px solid rgb(229, 225, 7);
    border-left: 1px solid rgb(6, 188, 39);
    border-right: 1px solid rgb(1, 25, 161);
}



/* Normal - background-color should be red , text-color should be white  */
.border-radius{
    margin-top: 20px;
    background-color: red;
    color: white;
    border: 1px solid red;
    border-radius: 5px;
}
/* Hover - background should be blue, text-color should be white, border-radius, border  should be blue */
.border-radius:hover{
    background-color: blue;
    color: white;
    border: 1px solid  blue;
    border-radius: 5px;
}

/* margins  */
/* CSS margins are used to create space around an element, separating it from neighboring elements and the edges of the webpage. They control the layout by adjusting the distance between elements, providing better organization and readability. */
.margin{
    width: 200px;
    height: 200px;
    border: 1px solid red;
    margin: 20px;
}
.margin-right{
    width: 200px;
    height: 200px;
    border: 1px solid yellow;
}

.margin-bottom{
    width: 200px;
    height: 200px;
    border: 1px solid green;
}

/* if a margin has 4 values, the first represents top, second represents right, third represents bottom, fourth represents left  */
.margins{
    width: 100px;
    height: 200px;
    border: 1px solid black;
}
.margin-1{
    width: 50px;
    height: 50px;
    border: 1px solid red;
    margin: 20px 30px 10px 15px;
}


/* If the margin property contains three values, then the first value sets the top margin, the second value sets the right and left margin, and the third value sets the bottom margin. */
.margs{
    width: 70px;
    height: 50px;
    border: 1px solid greenyellow;
    margin: 10px 20px 10px;
}

/* If the margin property contains two values, then the first value applies to the top and bottom margin, and the second value applies to the right and left margin. */
.margin-two-vals{
    width: 70px;
    height: 70px;
    border: 1px solid brown;
    margin:0px 50px;

}
/* margin: auto;: Automatically adjusts the left and right margins to center the element horizontally. */
/* The element must have a defined width for margin: auto; to work effectively. */
.center{
    margin: auto;

    width: 50%;
    height: 100px;
    border: 1px solid red;
    text-align: center;
}

/* Padding  */
/* CSS Padding property is used to create space between the element's content and the element's border. It only affects the content inside the element. */
.padding{
    margin-top: 40px;
    width: 200px;
    height: 100px;
    border: 1px solid yellow;
    padding-top: 20px;
    padding-left: 20px;
    padding-right: 20px;
    padding-bottom: 20px;

}

.inner-padding{
    border: 1px solid red;
    padding: 20px;
}

/* Padding Property for Two Values */
/* If the padding property contains two values, then the first value applies to the top and bottom padding, and the second value applies to the right and left padding. */
.shorthand-padding{
    width: 100px;
    height: 100px;
    border: 1px solid black;
    margin-top: 20px;
    padding: 10px 20px ;
}

/* If the padding property contains three values, then the first value sets the top padding, the second value sets the right and left padding, and the third value sets the bottom padding. */
.shorthand-padding-three-vals{
    width: 100px;
    height: 100px;
    border: 1px solid black;
    margin-top: 20px;
    padding: 10px 20px 60px;
}

/* Padding Property Having Four Values */
/* If the padding property contains four values, then the first value sets the top padding, the second value sets the right padding, the third value sets the bottom padding, and the fourth value sets the left padding.: */
.padding-four-vals{
    margin-top: 10px;
    width: 100px;
    height: 100px;
    border: 2px dashed green;
    padding: 10px 15px 20px 25px;
    border-radius: 5px;
    background: linear-gradient(rgba(255, 0, 0, 0.5));
    color: #fff;
}

/* CSS Units */
/* Last Updated : 28 Jul, 2025 */
/* CSS units define the size of elements, with absolute units (like px, cm) having fixed values and relative units (like em, rem, %, vh) depending on factors like the viewport or parent elements. */
/* - Use px mostly for border width and box shadows  */

.pixels-unit{
    font-size: 32px;
}

/* Relative Units */
/* 1. em */
/* In CSS , the "em" unit refers to the font-size of its parent element, defaulting to the root element (<html>) if it's the only one in the DOM. */
.parent-el{
    font-size: 3em;
}
.child-el{
    font-size: 2em;
}

/* 2. rem */
/* In CSS, rem is based on the font-size of the root element (<html>) and stays the same in all cases. */
.center{
    font-size: 3rem;
}

/* 3. vw or view-width */
/* In CSS, vw depends on the viewport width, which changes with screen size, so an Android phone has a smaller vw than an HD TV. */
.vw{
    width: 50vw;
    border: 1px dashed red;
    margin-left: 0.8rem;
}

.imgs{
    width: 100vw;
    height: 70vw;
    border: 2px solid greenyellow;
}
.img-vw{
    width: 50vw;
    height: 50vh;
}

/* 5. percentage(%) */
/* The % unit in CSS is relative to the parent element's size, allowing elements to adjust dynamically for responsive design. */
.percentage-unit{
    width: 300px;
    height: 400px;
    border: 2px dotted blue;
}

.p-unit{
    width: 50%;
}