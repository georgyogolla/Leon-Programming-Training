/* CSS Selectors  */
/* Type Selector (elements)
class 
id  */

/* selector {
    css properties
} */

/* Universal Selector (*)  */

/* *{
    background-color: gray;
} */


h1 {
color:red;
}

.blue {
    color: blue;
}

#id-selector {
    color: coral;
    font-size: 20px;
    text-align: center;
}

/* Nested selectors  */
h2, h3, .Group-3, #Group-4 {
    text-align: center;
}

ul li{
    font-size: 32px;
    /* list-style-type: square; */
}

/* Pseudo-classes and Pseudo-elements */
/* Pseudo-classes and pseudo-elements are used for styling specific states or parts of elements. 
Pseudo classes target's the elements based on a particular state and pseudo elements targets the elements on basis of a particular part of that element. */
a:hover {
    color: rgba(206, 55, 5, 0.842);
    text-decoration: none;
}

.pseudo-elements::first-line{
    font-weight: bold;
}

.pseudo-elements::before{
   content: " This is a pseudo element selection -  ";
}

.pseudo-elements::after{
   content: " - It was fun learning about pseudo selections";
}


/* Combinator Selectors */
 /* in CSS are used to define relationships between selectors, allowing you to style elements based on their hierarchy or positioning in the document. 
 Common combinators include descendant ( ), child (>), adjacent sibling (+), and general sibling (~). */

 /* 1. Descendant Selectors: Targets an element inside another, such as paragraphs inside div .For example, styling paragraphs inside a div. */
 .descendant p{
    font-size: 64px;
 }

.direct-child > p{
    color: white;
    background-color: brown;
}

/* .second-parent */
/* Have an hyphen(-) before the paragraph. */
/* change the font color of the paragraph to red  */
.second-parent > p::before{
    content: " - ";
    /* -pseudo-elements:: before; */
   
}

.second-parent > p{
    color: red;
};

/* 3. Adjacent Sibling Selector (+): Styles an element immediately following another .
/* For example, making the first paragraph bold after an h1. */
/* h2.adjacent-sibling + p {
    color: red;
    font-size: 32px;
}  */

.adjacent + p{
    color:  red;
}


/* General Sibling Selector (~): Styles all siblings that follow a specific element. For example, italicizing all paragraphs following an h1. */
.general-sibling-selector ~ p{
    font-size: 32px;
}

/* Attribute selectors in CSS target elements based on the presence or value of their attributes. Examples include [attr] (selects elements with the attribute), 
[attr="value"] (matches specific values), and [attr^="val"] (matches values starting with "val"). */

/* 1. Presence Selector: It selects elements that contain a specific attribute. For example, styling all inputs with a type attribute. */
input[type]{
    border: 1px solid red;
}

/* 2. Attribute Value Selector: It targets elements with a particular attribute value. For example, styling text inputs. */
input[placeholder="Text input"]{
    padding: 32px;
}

a[href^="https"]{
    color: green;
}

/* Wildcard Selector (*=): Matches elements where the attribute value contains a specific string. For example, underlining links with example in the URL. */
a[href*="example"]{
    background-color: aqua;
}

/* Pseudo-classes in CSS define the special states of elements for styling. Examples include :hover (applies when an element is hovered), :first-child (targets the first child of a parent), and :nth-child(2) (targets the second child). */

/* 1. :hover: Styles elements when the user hovers over them. For example, changing the color of a link when hovered. */

.pseudo-class:hover{
    background-color: red;
    color: white;
    font-size: 32px;
    text-align: center;
    text-decoration: none; 

}

/* 2. :focus: Styles the elements when the user focus on any particular element. */
.focus{
    border: 1px solid red;
}

.focus:focus{
    background-color: blue;
    color: white;
}

/* 3. :first-child: Styles the element which is the first child of it's parent. */
.boxes{
    margin-top: 20px;
    margin-bottom: 20px;
    width: 500px;
    height: 300px;
    border: 1px solid red;

}
.box{
    background-color: rgb(19, 9, 156);
    color: white;
    text-align: center;
}

.box:first-child{
    font-size: 32px;
}
.box:last-child{
    background-color: red;
    font-size: 32px;
}

.box:nth-child(2){
    background-color: green;
    font-size: 18px;
}

.box:nth-child(3){
    background-color: black;
    font-size: 20px;
}

/* 5. :not: Helps to remove a particular element from the styling index or styling context.
 */
 .container{
    margin-top: 20px;
    border: 1px solid green;
    width: 400px;
    height: 200px;
 }
 .container:not(.box-3){
    background-color: chocolate;
    color: white;
    font-size: 20px;
    /* border: 2px solid white; */
 }